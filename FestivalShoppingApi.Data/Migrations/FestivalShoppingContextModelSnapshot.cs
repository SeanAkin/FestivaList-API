// <auto-generated />
using System;
using FestivalShoppingApi.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace FestivalShoppingApi.Data.Migrations
{
    [DbContext(typeof(FestivalShoppingContext))]
    partial class FestivalShoppingContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.4");

            modelBuilder.Entity("FestivalShoppingApi.Data.Models.Category", b =>
                {
                    b.Property<Guid>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ShoppingListId")
                        .HasColumnType("TEXT");

                    b.HasKey("CategoryId");

                    b.HasIndex("ShoppingListId");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            CategoryId = new Guid("1e99ba74-2d2e-4a4f-a950-dc93c96dd18f"),
                            Name = "Camping Gear",
                            ShoppingListId = new Guid("46c437cf-e112-4210-a63e-e3ebddbd9cc6")
                        },
                        new
                        {
                            CategoryId = new Guid("8d04f075-f827-43bf-be47-de60895241b8"),
                            Name = "Food & Drinks",
                            ShoppingListId = new Guid("46c437cf-e112-4210-a63e-e3ebddbd9cc6")
                        },
                        new
                        {
                            CategoryId = new Guid("ab1de9fa-dc24-4df1-bb49-2188a8dd8a72"),
                            Name = "Clothing",
                            ShoppingListId = new Guid("46c437cf-e112-4210-a63e-e3ebddbd9cc6")
                        });
                });

            modelBuilder.Entity("FestivalShoppingApi.Data.Models.Item", b =>
                {
                    b.Property<Guid>("ItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Essential")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Url")
                        .HasColumnType("TEXT");

                    b.HasKey("ItemId");

                    b.HasIndex("CategoryId");

                    b.ToTable("Items");

                    b.HasData(
                        new
                        {
                            ItemId = new Guid("72758284-559b-4817-bc83-e3dc3e86f881"),
                            CategoryId = new Guid("1e99ba74-2d2e-4a4f-a950-dc93c96dd18f"),
                            Essential = true,
                            Name = "Tent",
                            Url = "https://example.com/tent"
                        },
                        new
                        {
                            ItemId = new Guid("ef8c36be-b2b5-49df-8f60-36321be8ce75"),
                            CategoryId = new Guid("1e99ba74-2d2e-4a4f-a950-dc93c96dd18f"),
                            Essential = true,
                            Name = "Sleeping Bag",
                            Url = "https://example.com/sleeping-bag"
                        },
                        new
                        {
                            ItemId = new Guid("6cd7e172-6f3c-49a5-9054-662e381e1138"),
                            CategoryId = new Guid("1e99ba74-2d2e-4a4f-a950-dc93c96dd18f"),
                            Essential = false,
                            Name = "Camping Stove",
                            Url = "https://example.com/camping-stove"
                        },
                        new
                        {
                            ItemId = new Guid("d26bbe5b-0143-4df8-8cf3-5d1c5789f768"),
                            CategoryId = new Guid("8d04f075-f827-43bf-be47-de60895241b8"),
                            Essential = true,
                            Name = "Water Bottles",
                            Url = "https://example.com/water-bottles"
                        },
                        new
                        {
                            ItemId = new Guid("6a05f952-7a57-4a58-b5de-0484c92e3174"),
                            CategoryId = new Guid("8d04f075-f827-43bf-be47-de60895241b8"),
                            Essential = false,
                            Name = "Snacks",
                            Url = "https://example.com/snacks"
                        },
                        new
                        {
                            ItemId = new Guid("acc89c5c-fe88-4eb5-97af-b1d1a10508ff"),
                            CategoryId = new Guid("8d04f075-f827-43bf-be47-de60895241b8"),
                            Essential = true,
                            Name = "Canned Food",
                            Url = "https://example.com/canned-food"
                        },
                        new
                        {
                            ItemId = new Guid("41b97414-1747-496c-bd60-0f2a62d27ed0"),
                            CategoryId = new Guid("ab1de9fa-dc24-4df1-bb49-2188a8dd8a72"),
                            Essential = true,
                            Name = "Rain Jacket",
                            Url = "https://example.com/rain-jacket"
                        },
                        new
                        {
                            ItemId = new Guid("8984a28f-dda8-4c90-a72a-fd72ed6f2621"),
                            CategoryId = new Guid("ab1de9fa-dc24-4df1-bb49-2188a8dd8a72"),
                            Essential = true,
                            Name = "Hiking Boots",
                            Url = "https://example.com/hiking-boots"
                        },
                        new
                        {
                            ItemId = new Guid("f9790305-4b63-4cf7-93cd-73748d3cb98b"),
                            CategoryId = new Guid("ab1de9fa-dc24-4df1-bb49-2188a8dd8a72"),
                            Essential = false,
                            Name = "Sunglasses",
                            Url = "https://example.com/sunglasses"
                        });
                });

            modelBuilder.Entity("FestivalShoppingApi.Data.Models.ItemStatus", b =>
                {
                    b.Property<Guid>("ItemStatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ItemId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ShopperId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("ItemStatusId");

                    b.HasIndex("ItemId");

                    b.HasIndex("ShopperId");

                    b.ToTable("ItemStatuses");
                });

            modelBuilder.Entity("FestivalShoppingApi.Data.Models.Shopper", b =>
                {
                    b.Property<Guid>("PersonId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ShoppingListId")
                        .HasColumnType("TEXT");

                    b.HasKey("PersonId");

                    b.HasIndex("ShoppingListId");

                    b.ToTable("Shoppers");
                });

            modelBuilder.Entity("FestivalShoppingApi.Data.Models.ShoppingList", b =>
                {
                    b.Property<Guid>("GuidId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("GuidId");

                    b.ToTable("ShoppingLists");

                    b.HasData(
                        new
                        {
                            GuidId = new Guid("46c437cf-e112-4210-a63e-e3ebddbd9cc6"),
                            Name = "Festival Shopping List"
                        });
                });

            modelBuilder.Entity("FestivalShoppingApi.Data.Models.Category", b =>
                {
                    b.HasOne("FestivalShoppingApi.Data.Models.ShoppingList", "ShoppingList")
                        .WithMany("Categories")
                        .HasForeignKey("ShoppingListId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ShoppingList");
                });

            modelBuilder.Entity("FestivalShoppingApi.Data.Models.Item", b =>
                {
                    b.HasOne("FestivalShoppingApi.Data.Models.Category", "Category")
                        .WithMany("Items")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("FestivalShoppingApi.Data.Models.ItemStatus", b =>
                {
                    b.HasOne("FestivalShoppingApi.Data.Models.Item", "Item")
                        .WithMany()
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FestivalShoppingApi.Data.Models.Shopper", "Shopper")
                        .WithMany("ItemStatuses")
                        .HasForeignKey("ShopperId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Item");

                    b.Navigation("Shopper");
                });

            modelBuilder.Entity("FestivalShoppingApi.Data.Models.Shopper", b =>
                {
                    b.HasOne("FestivalShoppingApi.Data.Models.ShoppingList", "ShoppingList")
                        .WithMany()
                        .HasForeignKey("ShoppingListId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ShoppingList");
                });

            modelBuilder.Entity("FestivalShoppingApi.Data.Models.Category", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("FestivalShoppingApi.Data.Models.Shopper", b =>
                {
                    b.Navigation("ItemStatuses");
                });

            modelBuilder.Entity("FestivalShoppingApi.Data.Models.ShoppingList", b =>
                {
                    b.Navigation("Categories");
                });
#pragma warning restore 612, 618
        }
    }
}
